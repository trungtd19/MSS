//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSS_DEMO.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MSSEntities : DbContext
    {
        public MSSEntities()
            : base("name=MSSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Campu> Campus { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Course_Deadline> Course_Deadline { get; set; }
        public virtual DbSet<Mentor_Log> Mentor_Log { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<Specification> Specifications { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Student_Course_Log> Student_Course_Log { get; set; }
        public virtual DbSet<Student_Specification_Log> Student_Specification_Log { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Subject_Student> Subject_Student { get; set; }
        public virtual DbSet<User_Role> User_Role { get; set; }
    
        public virtual ObjectResult<string> sp_Get_Compulsory_Spec_Completion(Nullable<System.DateTime> date_Import, string semester_ID)
        {
            var date_ImportParameter = date_Import.HasValue ?
                new ObjectParameter("Date_Import", date_Import) :
                new ObjectParameter("Date_Import", typeof(System.DateTime));
    
            var semester_IDParameter = semester_ID != null ?
                new ObjectParameter("Semester_ID", semester_ID) :
                new ObjectParameter("Semester_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_Get_Compulsory_Spec_Completion", date_ImportParameter, semester_IDParameter);
        }
    
        public virtual ObjectResult<sp_Get_Main_Report_Result> sp_Get_Main_Report(Nullable<System.DateTime> date_Import, string semester_ID, Nullable<int> no_Course_Completed, string final_Status, string roll, string subjet_ID, string campus_ID, string list_Roll)
        {
            var date_ImportParameter = date_Import.HasValue ?
                new ObjectParameter("Date_Import", date_Import) :
                new ObjectParameter("Date_Import", typeof(System.DateTime));
    
            var semester_IDParameter = semester_ID != null ?
                new ObjectParameter("Semester_ID", semester_ID) :
                new ObjectParameter("Semester_ID", typeof(string));
    
            var no_Course_CompletedParameter = no_Course_Completed.HasValue ?
                new ObjectParameter("No_Course_Completed", no_Course_Completed) :
                new ObjectParameter("No_Course_Completed", typeof(int));
    
            var final_StatusParameter = final_Status != null ?
                new ObjectParameter("Final_Status", final_Status) :
                new ObjectParameter("Final_Status", typeof(string));
    
            var rollParameter = roll != null ?
                new ObjectParameter("Roll", roll) :
                new ObjectParameter("Roll", typeof(string));
    
            var subjet_IDParameter = subjet_ID != null ?
                new ObjectParameter("Subjet_ID", subjet_ID) :
                new ObjectParameter("Subjet_ID", typeof(string));
    
            var campus_IDParameter = campus_ID != null ?
                new ObjectParameter("Campus_ID", campus_ID) :
                new ObjectParameter("Campus_ID", typeof(string));
    
            var list_RollParameter = list_Roll != null ?
                new ObjectParameter("List_Roll", list_Roll) :
                new ObjectParameter("List_Roll", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Main_Report_Result>("sp_Get_Main_Report", date_ImportParameter, semester_IDParameter, no_Course_CompletedParameter, final_StatusParameter, rollParameter, subjet_IDParameter, campus_IDParameter, list_RollParameter);
        }
    
        public virtual ObjectResult<sp_Get_Non_Compulsory_Spec_Completion_Result> sp_Get_Non_Compulsory_Spec_Completion(Nullable<System.DateTime> date_Import, string semester_ID)
        {
            var date_ImportParameter = date_Import.HasValue ?
                new ObjectParameter("Date_Import", date_Import) :
                new ObjectParameter("Date_Import", typeof(System.DateTime));
    
            var semester_IDParameter = semester_ID != null ?
                new ObjectParameter("Semester_ID", semester_ID) :
                new ObjectParameter("Semester_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Get_Non_Compulsory_Spec_Completion_Result>("sp_Get_Non_Compulsory_Spec_Completion", date_ImportParameter, semester_IDParameter);
        }
    }
}
